{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleLeft","index","state","document","getElementById","style","visibility","setState","handleRight","catArray","length","this","defaultOptions","loop","autoplay","animationData","animationData2","rendererSettings","preserveAspectRatio","className","fontSize","id","transform","onClick","options","height","width","isStopped","isPaused","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"qOA0EeA,G,yDAnEb,WAAYC,GAAQ,IAAD,8BACjB,cAAMA,IAIRC,WAAY,WAAM,IACTC,EAAS,EAAKC,MAAdD,MACP,GAAa,IAAVA,EACaE,SAASC,eAAe,SAChCC,MAAMC,WAAa,UACzB,EAAKC,SAAS,CAACN,MAAOA,EAAM,SACxB,GAAGA,EAAM,EAAI,EACjB,EAAKM,SAAS,CAACN,MAAOA,EAAM,QACzB,CACH,EAAKM,SAAS,CAACN,MAAOA,EAAM,IACfE,SAASC,eAAe,QAChCC,MAAMC,WAAa,WAhBT,EAoBnBE,YAAa,WAAM,IAAD,EACS,EAAKN,MAAvBO,EADS,EACTA,SAASR,EADA,EACAA,MAChB,GAAa,IAAVA,EACYE,SAASC,eAAe,QAChCC,MAAMC,WAAa,UACxB,EAAKC,SAAS,CAACN,MAAOA,EAAM,SACxB,GAAGA,EAAO,EAAIQ,EAASC,OAAO,EAClC,EAAKH,SAAS,CAACN,MAAOA,EAAM,QACzB,CACH,EAAKM,SAAS,CAACN,MAAOA,EAAM,IACdE,SAASC,eAAe,SAChCC,MAAMC,WAAa,WA7B3B,EAAKJ,MAAO,CAAEO,SAAS,CAAC,EAAG,EAAG,EAAG,GAAIR,MAAM,GAF1B,E,qDAqCT,IAAD,EACkBU,KAAKT,MAAvBO,EADA,EACAA,SAASR,EADT,EACSA,MACVW,EAAiB,CACrBC,MAAM,EACNC,UAAU,EACVC,cAAeC,EACfC,iBAAkB,CAChBC,oBAAqB,mBAG3B,OACE,yBAAKC,UAAU,OACb,2BAAOd,MAAO,CAACe,SAAS,QAAxB,iBACA,yBAAKD,UAAU,aACb,yBAAKE,GAAG,OAAOF,UAAU,QAAQd,MAAO,CAACiB,UAAU,mBAAoBC,QAASZ,KAAKX,aACrF,yBAAKmB,UAAU,aACb,+BAAQV,EAASR,IACjB,kBAAC,IAAD,CAAQuB,QAASZ,EACba,OAAO,OACPC,MAAM,OACNC,UAAWhB,KAAKT,MAAMyB,UACtBC,SAAUjB,KAAKT,MAAM0B,YAE3B,yBAAKP,GAAG,QAAQF,UAAU,QAAQd,MAAO,CAACiB,UAAU,iBAAkBC,QAASZ,KAAKH,oB,GA7D1EqB,IAAMC,YCMJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFnC,SAASC,eAAe,SDyHpB,kBAAmBmC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.34bc1d26.chunk.js","sourcesContent":["import React from 'react';\nimport Lottie from 'react-lottie';\nimport * as animationData from './asset/cat1.json'\nimport * as animationData2 from './asset/cat1.json'\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state ={ catArray:[0 ,1 ,2 ,3], index:1 };\n  }\n\n  handleLeft =()=> {\n    const {index} = this.state;\n    if(index === 3){\n      const right = document.getElementById('right');\n      right.style.visibility = \"visible\";\n      this.setState({index: index-1});\n    }else if(index-1 > 0 ){\n      this.setState({index: index-1});\n    }else{\n      this.setState({index: index-1});\n      const left = document.getElementById('left');\n      left.style.visibility = \"hidden\";\n    }\n  }\n\n  handleRight =()=> {\n    const {catArray,index} = this.state;\n    if(index === 0){\n      const left = document.getElementById('left');\n      left.style.visibility = \"visible\";\n      this.setState({index: index+1});\n    }else if(index +1 < catArray.length-1){\n      this.setState({index: index+1});\n    }else{\n      this.setState({index: index+1});\n      const right = document.getElementById('right');\n      right.style.visibility = \"hidden\";\n    }\n  }\n\n\n\n  render() {\n    const {catArray,index} = this.state;\n    const defaultOptions = {\n      loop: true,\n      autoplay: true, \n      animationData: animationData2.default,\n      rendererSettings: {\n        preserveAspectRatio: 'xMidYMid slice'\n      }\n    };\n  return (\n    <div className=\"App\">\n      <label style={{fontSize:\"4vh\"}}>cat animation</label>\n      <div className=\"animation\">\n        <div id=\"left\" className=\"arrow\" style={{transform:\"rotate(-135deg)\"}} onClick={this.handleLeft}></div>\n        <div className=\"container\">\n          <label>{catArray[index]}</label>\n          <Lottie options={defaultOptions}\n              height=\"32vh\"\n              width=\"32vh\"\n              isStopped={this.state.isStopped}\n              isPaused={this.state.isPaused}/>\n        </div>\n        <div id=\"right\" className=\"arrow\" style={{transform:\"rotate(45deg)\"}} onClick={this.handleRight}></div>\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}