{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["App","props","handleLeft","index","state","document","getElementById","style","visibility","setState","handleRight","imageArray","length","onSliderChange","value","console","log","speed","cat0","cat1","cat2","cat3","cat4","cat5","cat6","defaultOptions","loop","autoplay","rendererSettings","preserveAspectRatio","isPaused","this","defaultOption_index","sliderVisible","animationData","className","fontSize","color","id","transform","onClick","options","isClickToPauseDisabled","height","width","min","max","defaultValue","onChange","React","Component","Boolean","window","location","hostname","match","ReactDOM","render","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"2TAsGeA,G,yDApFb,WAAYC,GAAQ,IAAD,uBACjB,cAAMA,IAYRC,WAAY,WAAM,IACTC,EAAS,EAAKC,MAAdD,MACP,GAAa,IAAVA,EACaE,SAASC,eAAe,SAChCC,MAAMC,WAAa,UACzB,EAAKC,SAAS,CAACN,MAAOA,EAAM,SACxB,GAAGA,EAAM,EAAI,EACjB,EAAKM,SAAS,CAACN,MAAOA,EAAM,QACzB,CACH,EAAKM,SAAS,CAACN,MAAOA,EAAM,IACfE,SAASC,eAAe,QAChCC,MAAMC,WAAa,WAxBT,EA4BnBE,YAAa,WAAM,IAAD,EACW,EAAKN,MAAzBO,EADS,EACTA,WAAWR,EADF,EACEA,MAClB,GAAa,IAAVA,EACYE,SAASC,eAAe,QAChCC,MAAMC,WAAa,UACxB,EAAKC,SAAS,CAACN,MAAOA,EAAM,SACxB,GAAGA,EAAO,EAAIQ,EAAWC,OAAO,EACpC,EAAKH,SAAS,CAACN,MAAOA,EAAM,QACzB,CACH,EAAKM,SAAS,CAACN,MAAOA,EAAM,IACdE,SAASC,eAAe,SAChCC,MAAMC,WAAa,WAvCV,EA2CnBK,eAAiB,SAACC,GAChBC,QAAQC,IAAIF,GACZ,EAAKL,SAAS,CAACQ,MAAQH,KA3CvB,IAAMH,EAAa,CAACO,EAAOC,EAAOC,EAAOC,EAAMC,EAAMC,EAAMC,GAF1C,OAUjB,EAAKpB,MAAO,CAAED,MAAM,EAAGQ,WAAWA,EAAYc,eAPvB,CACrBC,MAAM,EACNC,UAAU,EACVC,iBAAkB,CAChBC,oBAAqB,kBAGoDC,UAAU,EAAQb,MAAM,GAVpF,E,qDAiDT,IAAD,SACoDc,KAAK3B,MAA3Da,EADE,EACFA,MAAOd,EADL,EACKA,MAAOsB,EADZ,EACYA,eAAgBd,EAD5B,EAC4BA,WAAYmB,EADxC,EACwCA,SAC7CE,EAAsBP,EACpBQ,EAAgBH,EAAW,SAAS,UAE1C,OADAE,EAAoBE,cAAgBvB,EAAWR,GAE7C,yBAAKgC,UAAU,OACb,2BAAO5B,MAAO,CAAC6B,SAAS,MAAMC,MAAM,UAApC,iBACA,yBAAKF,UAAU,aACb,yBAAKG,GAAG,OAAOH,UAAU,QAAQ5B,MAAO,CAACgC,UAAU,mBAAoBC,QAAST,KAAK7B,aACrF,yBAAKiC,UAAU,aACb,6CAAmBhC,EAAnB,KACA,kBAAC,IAAD,CACIc,MAAOA,EACPwB,QAAST,EACTU,wBAAwB,EACxBZ,SAAUA,EACVa,OAAO,OACPC,MAAM,UAGZ,yBAAKN,GAAG,QAAQH,UAAU,QAAQ5B,MAAO,CAACgC,UAAU,iBAAkBC,QAAST,KAAKrB,eAEtF,yBAAKyB,UAAU,iBACb,4BAAQA,UAAU,iBAAkBK,QAAS,kBAAM,EAAK/B,SAAS,CAACqB,UAAU,MAAU,kBAAC,IAAD,OACtF,4BAAQK,UAAU,iBAAkBK,QAAS,kBAAM,EAAK/B,SAAS,CAACqB,UAAU,MAAQ,kBAAC,IAAD,QAEtF,yBAAKK,UAAU,eAAe5B,MAAO,CAACC,WAAYyB,IAChD,kBAAC,IAAD,CAAQY,IAAK,EAAGC,IAAK,GAAIC,aAAc,EAAGC,SAAUjB,KAAKlB,uB,GA9E/CoC,IAAMC,YCLJC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAO,kBAAC,EAAD,MAASpD,SAASC,eAAe,SD6H3C,kBAAmBoD,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLlD,QAAQkD,MAAMA,EAAMC,a","file":"static/js/main.2638bfbf.chunk.js","sourcesContent":["import React from 'react';\nimport Lottie from 'react-lottie';\nimport cat0 from './asset/cat1.json'\nimport cat1 from './asset/cat2.json'\nimport cat2 from './asset/cat3.json'\nimport cat3 from './asset/cat4.json'\nimport cat4 from './asset/cat5.json'\nimport cat5 from './asset/cat6.json'\nimport cat6 from './asset/cat7.json'\nimport { FaPlay } from \"react-icons/fa\";\nimport { FaStopCircle } from \"react-icons/fa\";\nimport 'rc-slider/assets/index.css';\nimport 'rc-tooltip/assets/bootstrap.css';\nimport Tooltip from 'rc-tooltip';\nimport Slider from 'rc-slider';\nimport './App.css';\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n    const imageArray = [cat0 , cat1 , cat2 , cat3, cat4 ,cat5 ,cat6];\n    const defaultOptions = {\n      loop: true,\n      autoplay: true, \n      rendererSettings: {\n        preserveAspectRatio: 'xMidYMid meet'\n      }\n    };\n    this.state ={ index:1, imageArray:imageArray, defaultOptions:defaultOptions, isPaused: false , speed:1};\n  }\n\n  handleLeft =()=> {\n    const {index} = this.state;\n    if(index === 3){\n      const right = document.getElementById('right');\n      right.style.visibility = \"visible\";\n      this.setState({index: index-1});\n    }else if(index-1 > 0 ){\n      this.setState({index: index-1});\n    }else{\n      this.setState({index: index-1});\n      const left = document.getElementById('left');\n      left.style.visibility = \"hidden\";\n    }\n  }\n\n  handleRight =()=> {\n    const {imageArray,index} = this.state;\n    if(index === 0){\n      const left = document.getElementById('left');\n      left.style.visibility = \"visible\";\n      this.setState({index: index+1});\n    }else if(index +1 < imageArray.length-1){\n      this.setState({index: index+1});\n    }else{\n      this.setState({index: index+1});\n      const right = document.getElementById('right');\n      right.style.visibility = \"hidden\";\n    }\n  }\n\n  onSliderChange = (value) => {\n    console.log(value);\n    this.setState({speed : value});\n  }\n\n\n  render() {\n  const {speed, index, defaultOptions, imageArray, isPaused} = this.state;\n  let defaultOption_index = defaultOptions;\n  const sliderVisible = isPaused ? \"hidden\":\"visible\";\n  defaultOption_index.animationData = imageArray[index];\n  return (\n    <div className=\"App\">\n      <label style={{fontSize:\"4vh\",color:\"white\"}}>cat animation</label>\n      <div className=\"animation\">\n        <div id=\"left\" className=\"arrow\" style={{transform:\"rotate(-135deg)\"}} onClick={this.handleLeft}></div>\n        <div className=\"container\">\n          <label>cat image:[{index}]</label>\n          <Lottie \n              speed={speed}\n              options={defaultOption_index}\n              isClickToPauseDisabled={true}\n              isPaused={isPaused}\n              height=\"32vh\"\n              width=\"32vh\"\n          />\n        </div>\n        <div id=\"right\" className=\"arrow\" style={{transform:\"rotate(45deg)\"}} onClick={this.handleRight}></div>\n      </div>\n      <div className=\"controllPanel\">\n        <button className=\"controllButton\"  onClick={() => this.setState({isPaused: false })}><FaPlay/></button>\n        <button className=\"controllButton\"  onClick={() => this.setState({isPaused: true})}><FaStopCircle/></button>\n      </div>\n      <div className=\"wrapperStyle\" style={{visibility :sliderVisible}}>\n        <Slider min={1} max={15} defaultValue={1} onChange={this.onSliderChange}  />\n      </div>\n    </div>\n  );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}